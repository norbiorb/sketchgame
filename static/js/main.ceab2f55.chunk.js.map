{"version":3,"sources":["loader.js","App.js","helpers.js","TimedText.js","Round.js","Canvas.js","Controls.js","Play.js","TypedText.js","Game.js","serviceWorker.js","index.js"],"names":["a","console","log","tf","then","catch","e","App","className","key","href","to","getPrediction","canvas","model","tensor","fromPixels","current","resizeNearestNeighbor","mean","expandDims","toFloat","div","preprocessCanvas","loadedModel","predict","data","prediction","argMax","max","shuffle","labels","len","length","indices","Array","from","keys","shuffled","i","idx","Math","floor","random","tmp","TimedText","props","useContext","PlayContext","timerRef","setTime","strings","answer","questionStart","secondsPerRound","questionEnd","useState","isActive","setIsActive","useCountdown","callback","seconds","useEffect","baseOptions","typeSpeed","contentType","showCursor","cursorChar","options1","onComplete","typed2","start","options2","typed3","options3","typed4","options4","Typed","stop","id","ref","setSeconds","interval","setInterval","clearInterval","Round","handleTimeout","roundState","state","label","currentLabel","texts","Canvas","React","forwardRef","lastX","lastY","GameContext","handlePrediction","mouseDown","ctx","getContext","fillStyle","fillRect","height","width","clearCanvas","onMouseDown","onMouseUp","undefined","onMouseMove","rect","target","getBoundingClientRect","x","clientX","left","y","clientY","top","context","strokeStyle","lineWidth","lineJoin","beginPath","moveTo","lineTo","closePath","stroke","drawLine","handleMousemove","style","backgroundColor","Controls","onClick","createContext","Play","toggleGameEnded","dispatchPoints","bonustime","CORRECT","TIMEDOUT","useRef","initialRoundState","activeRound","currentlabel","result","timeUsed","toString","points","useRounds","action","type","payload","newState","rounds","dispatchActiveRound","round","setResult","evaluatePrediction","predictedLabel","timeleft","parseInt","innerHTML","getTime","Number","isNaN","processCorrectPrediction","Provider","value","time","reduceRoundState","useReducer","apply","map","index","TypedText","this","options","typed","el","destroy","Component","labelsOrig","require","createRef","initialPoints","bonus","reducePoints","pointsState","Result","maxPoints","level","message","Game","gameEnded","setGameEnded","STORE_RESULT","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","error","Navigation","basename","process","exact","path","render","ReactDOM","loadModel","document","getElementById","URL","origin","addEventListener","fetch","headers","response","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ceab2f55.chunk.js","sourcesContent":["import * as tf from \"@tensorflow/tfjs\";\n\nexport async function loadModel() {\n    console.log(\"Model loading...\");\n    // load the model using a HTTPS request (where you have stored your model files)\n    return await tf\n    .loadLayersModel(\"./model/model.json\")\n    .then(console.log(\"Loaded.\")).catch(e => console.log(e));\n  }","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst App = () => {\n  return (\n    <section className=\"nes-container is-dark\">\n      <h2>Sketch</h2>\n      <article key=\"game\">\n      <p>This game has been modeled-off Google's  \n         &nbsp;<a href=\"https://quickdraw.withgoogle.com\">Quick, Draw! </a> game, and uses a sampling \n        from the Quick Draw! <a href=\"https://quickdraw.withgoogle.com/data\">dataset</a>.</p>\n      <p>\n        Brought to you by the EPFL Extension School.\n      </p>\n      </article>\n      <footer>\n        <Link className=\"nes-btn\" to=\"/game\">Play Game</Link>\n      </footer>\n    </section>\n  )\n}\n\nexport default App;","import * as tf from \"@tensorflow/tfjs\";\n\nexport function preprocessCanvas(canvas) {\n  // Preprocess image for the network\n  let tensor = tf\n    .browser\n    .fromPixels(canvas.current) // Shape: (300, 300, 3) - RGB image\n    .resizeNearestNeighbor([28, 28]) // Shape: (28, 28, 3) - RGB image\n    .mean(2) // Shape: (28, 28) - grayscale\n    .expandDims(2) // Shape: (28, 28, 1) - network expects 3d values with channels in the last dimension\n    .expandDims() // Shape: (1, 28, 28, 1) - network makes predictions for \"batches\" of images\n    .toFloat(); // Network works with floating points inputs\n    return tensor.div(255.0); // Normalize [0..255] values into [0..1] range\n}\n\nexport function getPrediction(canvas, model) {\n  const tensor = preprocessCanvas(canvas);\n  return model\n    .then((loadedModel) => {\n      return loadedModel.predict(tensor).data();\n    }\n      )\n    //.then(async prediction => await tf.argMax(prediction).data()); // returns an int32 containing the predicted class\n    .then(async (prediction) => {\n      let argMax = await tf.argMax(prediction).data();\n      const max = prediction[argMax];\n      console.log(`getPrediction: prediction index: ${argMax} with confidence ${max}`);\n      return argMax;\n    });\n  }\n\n  export function shuffle(labels) {\n    const len = labels.length;\n    const indices = Array.from(Array(len).keys())\n    const shuffled = new Array(len);\n    for (let i = 0; i < len-1; i++) {\n      let idx = i + Math.floor(Math.random() * (len-i));\n      let tmp = indices[idx];\n      indices[idx]= indices[i];\n      indices[i] = tmp;\n    }\n    // fill new labels array\n    for (let i = 0; i < len; i++) {\n      shuffled[indices[i]] = labels[i];\n    }\n    return [shuffled, indices];\n  }","import React, {useEffect, useContext , useState} from \"react\";\nimport Typed from 'typed.js';\n\nimport { PlayContext } from './Play';\n\nconst TimedText = (props) => {\n\n  const { timerRef, setTime } = useContext(PlayContext);\n\n  const { answer, questionStart, secondsPerRound, questionEnd } = props.strings;\n\n  const [isActive, setIsActive] = useState(false);\n\n  const [seconds] = useCountdown(secondsPerRound, props.callback, isActive);\n\n  useEffect(() => {\n\n    const baseOptions = {\n      typeSpeed: 20,\n      contentType: 'html',\n      showCursor: true,\n      cursorChar: ' '\n      \n    };\n    let typed1 = null;\n    let typed2 = null;\n    let typed3 = null;\n    let typed4 = null;;\n    if (isActive) {\n      setTime(timerRef, seconds);\n    } else {\n      const options1 = {\n          ...baseOptions, \n          strings: [answer], \n          onComplete: () => typed2.start()\n      }\n      let options2 = {\n          ...baseOptions, \n          strings: [questionStart], \n          onComplete: () => typed3.start()\n      }\n      const options3 = {\n          ...baseOptions,\n          strings: [`${seconds}`], \n          onComplete: () => typed4.start()\n      }\n      const options4 = {\n          ...baseOptions,\n          strings: [questionEnd], \n          onComplete: () => setIsActive(true)\n      }\n      const typed1 = new Typed('#typed1', options1);\n      typed1.start();\n      const typed2 = new Typed('#typed2', options2);\n      typed2.stop();\n      const typed3 = new Typed('#typed3', options3);\n      typed3.stop();\n      const typed4 = new Typed('#typed4', options4);\n      typed4.stop(); \n    }\n\n    return () => {\n      if (typed1) typed1.destroy();\n      if (typed2) typed2.destroy();\n      if (typed3) typed3.destroy();\n      if (typed4) typed4.destroy();\n    }\n  }, [answer, isActive, questionEnd, questionStart, seconds, setTime, timerRef]);\n\n  return (\n    <div>\n      <span className=\"typed\" id=\"typed1\" />\n      <span className=\"typed\" id=\"typed2\" />\n      <span ref={timerRef} className=\"typed\" id=\"typed3\" />\n      <span className=\"typed\" id=\"typed4\"/>\n    </div>\n  );\n}\n\nconst useCountdown = (secondsPerRound, callback, isActive) => {\n  const [seconds, setSeconds] = useState(secondsPerRound);\n  \n  useEffect(() => {\n    let interval;\n\n    if (isActive) {\n      interval = setInterval(function() {\n        if(seconds <= 0) {\n          callback(seconds);\n          clearInterval(interval);       \n        } else {\n          setSeconds(seconds => seconds - 1);\n        }\n      }, 1000);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    }\n  }, [seconds, callback, isActive]);\n\n  return [seconds];\n};\n\nexport { TimedText };\n\n  ","import React, { useContext } from 'react';\n\nimport { PlayContext } from './Play';\nimport { TimedText } from './TimedText';\n\nconst Round = (props) => {\n  const { handleTimeout } = useContext(PlayContext);\n  const roundState = props.state;\n  const label = roundState.currentLabel;\n  \n  return ( \n    <div className=\"status-text\">\n      <TimedText \n        key={label} \n        label={label} \n        strings={{...roundState.texts}} \n        callback={handleTimeout}\n      > \n      </TimedText>\n    </div>\n  );\n}\n\nexport { Round };\n","import React, { useEffect, useContext } from 'react';\n\nimport { GameContext } from './Game';\nimport { PlayContext } from './Play';\nconst Canvas = React.forwardRef(() => {\n\n  const { ref } = useContext(GameContext);\n  const { handlePrediction } = useContext(PlayContext);\n \n  const clearCanvas = (ref) => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillStyle = \"#ffffff\";\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n  }\n\n  let mouseDown = false;\n  let lastX;\n  let lastY;\n\n  function drawLine(canvas, x, y, lastX, lastY) {\n    let context = canvas.getContext(\"2d\");\n\n    context.strokeStyle = \"#000000\";\n    context.lineWidth = 12;\n    context.lineJoin = \"round\";\n\n    context.beginPath();\n    context.moveTo(lastX, lastY);\n    context.lineTo(x, y);\n    context.closePath();\n    context.stroke();\n\n    return [x, y];\n  }\n\n  const handleMouseup = () => {\n    handlePrediction();\n    mouseDown = false;\n    [lastX, lastY] = [undefined, undefined];\n  };\n\n  const handleMousemove = e => {\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n\n    if (mouseDown) {\n      [lastX, lastY] = drawLine(e.target, x, y, lastX, lastY);\n    }\n  };\n\n  useEffect(() => {\n    clearCanvas(ref);\n  }, [ref]);\n\n  return (\n    <canvas className=\"canvas\"\n      height={300}\n      width={300}\n      ref={ref}\n      onMouseDown={() => (mouseDown = true)}\n      onMouseUp={handleMouseup}\n      onMouseMove={e => handleMousemove(e)}\n      style={{ backgroundColor: \"#ffffff\" }} \n    />\n  );\n});\n  \nexport { Canvas };","import React, { useContext } from \"react\";\n\nimport { GameContext } from './Game';\n\nfunction Controls() {\n  const { ref } = useContext(GameContext);\n\n  return (\n    <div className=\"controls\">\n      <button\n        className=\"nes-btn is-warning controls-button\"\n        onClick={() => {\n          const canvas = ref.current;\n          const ctx = canvas.getContext(\"2d\");\n          ctx.fillRect(0, 0, canvas.height, canvas.width);\n        }}\n      >\n        Clear Canvas\n      </button>\n    </div>\n  );\n}\n\nexport { Controls };","import React, { createContext, useEffect, useState, useContext, useRef, useReducer } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { GameContext } from './Game';\nimport { getPrediction } from \"./helpers.js\";\nimport { Round } from './Round'; \nimport { Canvas } from './Canvas'; \nimport { Controls } from './Controls';\n\nconst PlayContext = createContext({});\n\nconst Play = () => { \n  const { \n      toggleGameEnded, \n      labels, \n      indices, \n      dispatchPoints, \n      model, \n      secondsPerRound, \n      ref, \n      bonustime,\n      CORRECT, \n      TIMEDOUT \n  } = useContext(GameContext);\n  \n  const timerRef = useRef();\n  \n  const reduceRoundState = (state, action) => {\n    const { type, payload } = action;\n    switch (type) {\n      case 'increment': \n        let newState = {\n          ...state, \n          label: payload.label, \n          result: payload.result,\n          timeUsed: payload.timeUsed,\n          activeRound: state.activeRound + 1,\n          currentLabel: labels[state.activeRound + 1]\n          };\n\n        let answer = newState.result ===  CORRECT ? \n        newState.timeUsed <= bonustime ? `You know you made an awsome ${newState.label} sketch in only ${newState.timeUsed} seconds!` \n        : `Well Done! You draw a ${newState.label} in ${newState.timeUsed} seconds. Can you do faster? ` \n        : newState.result ===  TIMEDOUT ? `You run out of time when drawing a ${newState.label}. `\n        : '';\n        let questionStart = `You have now` ;\n        let questionEnd = `seconds to draw a ${labels[newState.activeRound]}`;\n\n        let texts = {\n          answer: answer,\n          questionStart: questionStart,\n          questionEnd: questionEnd,\n          secondsPerRound: secondsPerRound.toString()\n        }\n\n        newState.texts = texts;\n        return newState;\n\n      default:\n        return state;\n    }\n  }\n  \n  const initialRoundState = {\n    activeRound: 0,\n    currentlabel: labels[0],\n    secondsPerRound: secondsPerRound,\n    label: '',\n    result: '',\n    timeUsed: secondsPerRound.toString(),\n    points: 0,\n    texts: {\n      answer: 'Let\\'s start',\n      questionStart: 'You have',\n      questionEnd: `seconds to draw a ${labels[0]} in the canvas on the left.`,\n      secondsPerRound: secondsPerRound.toString()\n    }\n  };\n  \n  const [rounds, roundState, dispatchActiveRound] \n          = useRounds(labels, reduceRoundState, initialRoundState);\n  \n  const activeRound = roundState.activeRound;\n\n  useEffect(() => {\n    if (activeRound === labels.length) {\n      toggleGameEnded();\n    }\n  }, [activeRound, toggleGameEnded, labels]);\n\n  const round = rounds[activeRound];\n\n  const [result, setResult] = useState('');\n\n  const clearCanvas = (ref) => {\n    const canvas = ref.current;\n    const ctx = canvas.getContext(\"2d\");\n    ctx.fillRect(0, 0, canvas.height, canvas.width);\n  }\n\n  const getTime = (timerRef) => {\n    return timerRef.current.innerHTML;\n  }\n\n  const setTime = (timerRef,time) => {\n    timerRef.current.innerHTML = time;\n  }\n  \n  const handleTimeout = (timeleft) => {\n    if (timeleft <= 0) {\n      clearCanvas(ref);\n      setResult(TIMEDOUT);\n      dispatchActiveRound({ \n        type: 'increment',\n        payload: {\n          label: labels[activeRound],\n          result: TIMEDOUT,\n          timeUsed: secondsPerRound\n        } \n       });\n    }\n  }\n\n  const processCorrectPrediction = () => {\n    const timeleft = parseInt(getTime(timerRef));\n  \n    // in case a sketch is done before initializing the new round\n    if (!Number.isNaN(timeleft)) {\n      const timeUsed = secondsPerRound - timeleft;\n      setResult(CORRECT);\n      dispatchPoints({type: 'increment', \n        payload: {\n          timeUsed: timeUsed,\n        }\n      });\n      clearCanvas(ref);\n      dispatchActiveRound({ \n        type: 'increment',\n        payload: {\n          label: labels[activeRound],\n          result: CORRECT,\n          timeUsed: timeUsed\n        } \n       });\n    }\n  }\n\n  const evaluatePrediction = (prediction) => {   \n    const label = labels[activeRound];\n\n    // use permutation indices to get the correct label\n    const predictedLabel = labels[indices[prediction[0]]];\n    console.log('Predicted Label: ', predictedLabel);\n    if (label === predictedLabel) {\n      processCorrectPrediction();\n    }\n  }\n  \n  const handlePrediction = async () => {\n    const prediction = await getPrediction(ref, model);\n    evaluatePrediction(prediction);\n  }; \n\n  return (\n    <div className=\"nes-container with-title is-dark\">\n    <h2 className=\"title\">Sketch Round {activeRound +1} of {labels.length} Rounds</h2> \n      <header className=\"header\">\n        <Link className=\" nes-btn\" to=\"/\">Home</Link> \n      </header> \n      <PlayContext.Provider value={{\n            activeRound,\n            dispatchActiveRound,\n            roundState,\n            result,\n            setResult,\n            timerRef,\n            setTime,\n            handlePrediction,\n            handleTimeout\n      }}>   \n        <main className=\"main\"> \n          <div className=\"canvas-wrapper\">       \n            <Canvas />\n          </div> \n          <div className=\"status\">\n          {round} \n          <Controls />    \n          </div>\n        </main>\n      </PlayContext.Provider>\n    </div>      \n  ) \n}\n\nconst useRounds = (labels, reduceRoundState, initialRoundState) => {\n\n  const [roundState, dispatchActiveRound] = useReducer(reduceRoundState, initialRoundState);\n\n  const rounds = Array.apply(null, labels).map(\n    (label, index) => {\n      return (roundState.activeRound === index) ? \n         (<Round key={index} state={roundState}/>) \n        : null;    \n  });\n\n  return [rounds, roundState, dispatchActiveRound];\n};\n\nexport { Play, PlayContext }","import React from 'react';\nimport Typed from 'typed.js';\n\nclass TypedText extends React.Component {\n  \n  baseOptions = {\n    typeSpeed: 20,\n    showCursor: false,\n    contentType: 'html'\n  };  \n  \n  componentDidMount() {\n    const { strings } = this.props;\n    \n    const options = {\n      ...this.baseOptions, \n      strings: strings\n    }\n    this.typed = new Typed(this.props.timerRef ? this.props.timerRef : this.el, options); \n    this.typed.start(); \n  }\n  \n  componentWillUnmount() {\n    if (this.typed) this.typed.destroy();\n  }\n  \n  render() {\n    return (\n          <span\n            id={this.props.id ? this.props.id : ''}\n            className=\"typed\"\n            ref={this.props.timerRef ? this.props.timerRef : (el) => { this.el = el; }}\n          />\n    );\n  }\n}\n\nexport { TypedText };","import React, { useReducer, useState, createContext, createRef } from \"react\";\nimport { Link } from \"react-router-dom\";\n\nimport { Play } from './Play';\nimport { TypedText } from './TypedText';\n\nimport { getPrediction, shuffle } from \"./helpers.js\";\n\nconst labelsOrig = require(\"./labels.json\");\n\nlet [labels, indices] = shuffle(labelsOrig);\nconst GameContext = createContext({});\n\nconst ref = createRef();\n\nconst STORE_RESULT = 'storeResult';\nconst CORRECT = 'correct';\nconst TIMEDOUT = 'timedout';\n\nconst secondsPerRound = 20;\nconst bonustime = 5;\n\nconst initialPoints = {\n  points: 0,\n  bonus: 0\n}\n\nconst hasBonus = (time) => {\n  return time <= bonustime;\n}\n\nconst reducePoints = (pointsState, action) => {\n  switch(action.type) {\n    case 'increment': \n      if (hasBonus(action.payload.timeUsed)) {\n        return {\n          points: pointsState.points + 1,\n          bonus: pointsState.bonus + 1\n        };\n      } else {\n        return {...pointsState, \n          points: pointsState.points + 1\n        };\n      }\n    case 'reset':\n      return initialPoints;\n    default:\n      return pointsState;\n  }\n}\n\nconst Result = (props) => {\n  const { pointsState, maxPoints } = props;\n  const points = pointsState.points;\n  const bonus = pointsState.bonus;\n\n  const level = points/maxPoints;\n\n  const message = \n    level >= 0.75 ? `Great Job! You won! You did ${points} out of ${maxPoints} and too ${bonus} bonus points for sketching fast! You like to play again?`\n    : level < 0.75 && level >= 0.5  ? `You won! Not bad! You did ${points} out of ${maxPoints} with a bonus of ${bonus} points for sketching fast. Like to improve and play again?`\n    : `Whoops... you did ${points} out of ${maxPoints}!  Your additional bonus is ${bonus} points for sketching fast.Try harder and play again!`;\n\n    return ( <TypedText strings={[message]} />);\n}\n\n\nconst Game = ({ model }) => {\n  const maxPoints = labelsOrig.length; \n  const [pointsState, dispatchPoints] = useReducer(reducePoints, initialPoints);\n\n  const [gameEnded, setGameEnded] = useState(false);\n\n  const toggleGameEnded = () => {\n    if (gameEnded) {\n      [labels, indices] = shuffle(labelsOrig);\n      dispatchPoints({type: 'reset'});   \n    }  \n    setGameEnded(!gameEnded);\n  }\n\n  return (\n    <GameContext.Provider value={{ \n      model, \n      ref, \n      secondsPerRound, \n      dispatchPoints, \n      getPrediction, \n      toggleGameEnded,\n      labels,\n      indices,\n      STORE_RESULT,\n      CORRECT,\n      TIMEDOUT,\n      bonustime\n    }}>\n    {gameEnded \n      ? (\n        <div className=\"nes-container is-dark with-title\">\n           <h1 className=\"title\">Sketch</h1>\n           <div className=\"result\">\n            <Result pointsState={pointsState} maxPoints={maxPoints} />\n          </div> \n          <div>\n            <button className=\"nes-btn is-warning flex-column\" onClick={toggleGameEnded}>Play again</button>\n          </div>\n          <div>\n            <Link className=\"nes-btn \" to=\"/\">Home</Link>  \n          </div>\n        </div>\n        )\n      : (<Play className=\"nes-container is-dark\" />)\n    }</GameContext.Provider>\n  );\n}\n\nexport default Game;\nexport { GameContext };\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nimport { loadModel } from './loader.js';\nimport \"./index.css\";\nimport App from \"./App\";\nimport Game from \"./Game\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nconst Navigation = ({ model }) => {\n  \n  return (\n  <Router key=\"game\" basename={process.env.PUBLIC_URL}>\n    <Switch>\n      <Route \n        exact path=\"/\"\n        render={(props) => <App {...props} model={model} />}\n      />\n      <Route \n        exact path=\"/game\"\n        render={(props) => <Game  {...props} model={model} />} \n      />\n    </Switch>\n  </Router>) \n}\n\nReactDOM.render(\n  <Navigation model={loadModel()}/>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.register();"],"sourceRoot":""}